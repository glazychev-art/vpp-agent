// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /home/art/xor/vpp/build-root/install-vpp-native/vpp/share/vpp/api/plugins/wg.api.json

/*
Package wg is a generated VPP binary API for 'wg' module.

It consists of:
	 10 enums
	  6 aliases
	  6 types
	  1 union
	 18 messages
	  9 services
*/
package wg

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "wg"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x3945d756
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint32

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint32]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint32{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 1
	IF_API_TYPE_SUB      IfType = 2
	IF_API_TYPE_P2P      IfType = 3
	IF_API_TYPE_PIPE     IfType = 4
)

var IfType_name = map[uint32]string{
	1: "IF_API_TYPE_HARDWARE",
	2: "IF_API_TYPE_SUB",
	3: "IF_API_TYPE_P2P",
	4: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 1,
	"IF_API_TYPE_SUB":      2,
	"IF_API_TYPE_P2P":      3,
	"IF_API_TYPE_PIPE":     4,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint32

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_AH       IPProto = 50
	IP_API_PROTO_ESP      IPProto = 51
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint32]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_AH",
	51:  "IP_API_PROTO_ESP",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint32{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_AH":       50,
	"IP_API_PROTO_ESP":      51,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 1
	MTU_PROTO_API_IP4  MtuProto = 2
	MTU_PROTO_API_IP6  MtuProto = 3
	MTU_PROTO_API_MPLS MtuProto = 4
	MTU_PROTO_API_N    MtuProto = 5
)

var MtuProto_name = map[uint32]string{
	1: "MTU_PROTO_API_L3",
	2: "MTU_PROTO_API_IP4",
	3: "MTU_PROTO_API_IP6",
	4: "MTU_PROTO_API_MPLS",
	5: "MTU_PROTO_API_N",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   1,
	"MTU_PROTO_API_IP4":  2,
	"MTU_PROTO_API_IP6":  3,
	"MTU_PROTO_API_MPLS": 4,
	"MTU_PROTO_API_N":    5,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// AddressWithPrefix represents VPP binary API alias 'address_with_prefix'.
type AddressWithPrefix Prefix

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP4AddressWithPrefix represents VPP binary API alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// IP6AddressWithPrefix represents VPP binary API alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string { return "address" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string { return "ip4_prefix" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string { return "ip6_prefix" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string { return "mprefix" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string { return "prefix" }

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string { return "prefix_matcher" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string { return "address_union" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// WgDeviceDetails represents VPP binary API message 'wg_device_details'.
type WgDeviceDetails struct {
	Retval     int32
	IsInited   bool
	PrivateKey []byte `struc:"[45]byte"`
	Port       uint16
}

func (m *WgDeviceDetails) Reset()                        { *m = WgDeviceDetails{} }
func (*WgDeviceDetails) GetMessageName() string          { return "wg_device_details" }
func (*WgDeviceDetails) GetCrcString() string            { return "1cd3f594" }
func (*WgDeviceDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// WgDeviceDump represents VPP binary API message 'wg_device_dump'.
type WgDeviceDump struct{}

func (m *WgDeviceDump) Reset()                        { *m = WgDeviceDump{} }
func (*WgDeviceDump) GetMessageName() string          { return "wg_device_dump" }
func (*WgDeviceDump) GetCrcString() string            { return "51077d14" }
func (*WgDeviceDump) GetMessageType() api.MessageType { return api.RequestMessage }

// WgGenkey represents VPP binary API message 'wg_genkey'.
type WgGenkey struct{}

func (m *WgGenkey) Reset()                        { *m = WgGenkey{} }
func (*WgGenkey) GetMessageName() string          { return "wg_genkey" }
func (*WgGenkey) GetCrcString() string            { return "51077d14" }
func (*WgGenkey) GetMessageType() api.MessageType { return api.RequestMessage }

// WgGenkeyReply represents VPP binary API message 'wg_genkey_reply'.
type WgGenkeyReply struct {
	Retval     int32
	PrivateKey []byte `struc:"[45]byte"`
}

func (m *WgGenkeyReply) Reset()                        { *m = WgGenkeyReply{} }
func (*WgGenkeyReply) GetMessageName() string          { return "wg_genkey_reply" }
func (*WgGenkeyReply) GetCrcString() string            { return "80d412cc" }
func (*WgGenkeyReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// WgPeersCount represents VPP binary API message 'wg_peers_count'.
type WgPeersCount struct{}

func (m *WgPeersCount) Reset()                        { *m = WgPeersCount{} }
func (*WgPeersCount) GetMessageName() string          { return "wg_peers_count" }
func (*WgPeersCount) GetCrcString() string            { return "51077d14" }
func (*WgPeersCount) GetMessageType() api.MessageType { return api.RequestMessage }

// WgPeersCountReply represents VPP binary API message 'wg_peers_count_reply'.
type WgPeersCountReply struct {
	Retval int32
	Count  uint64
}

func (m *WgPeersCountReply) Reset()                        { *m = WgPeersCountReply{} }
func (*WgPeersCountReply) GetMessageName() string          { return "wg_peers_count_reply" }
func (*WgPeersCountReply) GetCrcString() string            { return "5254a18b" }
func (*WgPeersCountReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// WgPeersDetails represents VPP binary API message 'wg_peers_details'.
type WgPeersDetails struct {
	IsDead     bool
	PublicKey  []byte `struc:"[45]byte"`
	IP4Address IP4Address
}

func (m *WgPeersDetails) Reset()                        { *m = WgPeersDetails{} }
func (*WgPeersDetails) GetMessageName() string          { return "wg_peers_details" }
func (*WgPeersDetails) GetCrcString() string            { return "06a935fc" }
func (*WgPeersDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// WgPeersDump represents VPP binary API message 'wg_peers_dump'.
type WgPeersDump struct{}

func (m *WgPeersDump) Reset()                        { *m = WgPeersDump{} }
func (*WgPeersDump) GetMessageName() string          { return "wg_peers_dump" }
func (*WgPeersDump) GetCrcString() string            { return "51077d14" }
func (*WgPeersDump) GetMessageType() api.MessageType { return api.RequestMessage }

// WgPubkey represents VPP binary API message 'wg_pubkey'.
type WgPubkey struct {
	PrivateKey []byte `struc:"[45]byte"`
}

func (m *WgPubkey) Reset()                        { *m = WgPubkey{} }
func (*WgPubkey) GetMessageName() string          { return "wg_pubkey" }
func (*WgPubkey) GetCrcString() string            { return "6602bfe7" }
func (*WgPubkey) GetMessageType() api.MessageType { return api.RequestMessage }

// WgPubkeyReply represents VPP binary API message 'wg_pubkey_reply'.
type WgPubkeyReply struct {
	Retval    int32
	PublicKey []byte `struc:"[45]byte"`
}

func (m *WgPubkeyReply) Reset()                        { *m = WgPubkeyReply{} }
func (*WgPubkeyReply) GetMessageName() string          { return "wg_pubkey_reply" }
func (*WgPubkeyReply) GetCrcString() string            { return "03b16e1b" }
func (*WgPubkeyReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// WgRemoveDevice represents VPP binary API message 'wg_remove_device'.
type WgRemoveDevice struct{}

func (m *WgRemoveDevice) Reset()                        { *m = WgRemoveDevice{} }
func (*WgRemoveDevice) GetMessageName() string          { return "wg_remove_device" }
func (*WgRemoveDevice) GetCrcString() string            { return "51077d14" }
func (*WgRemoveDevice) GetMessageType() api.MessageType { return api.RequestMessage }

// WgRemoveDeviceReply represents VPP binary API message 'wg_remove_device_reply'.
type WgRemoveDeviceReply struct {
	Retval int32
}

func (m *WgRemoveDeviceReply) Reset()                        { *m = WgRemoveDeviceReply{} }
func (*WgRemoveDeviceReply) GetMessageName() string          { return "wg_remove_device_reply" }
func (*WgRemoveDeviceReply) GetCrcString() string            { return "e8d4e804" }
func (*WgRemoveDeviceReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// WgRemovePeer represents VPP binary API message 'wg_remove_peer'.
type WgRemovePeer struct {
	PublicKey []byte `struc:"[45]byte"`
}

func (m *WgRemovePeer) Reset()                        { *m = WgRemovePeer{} }
func (*WgRemovePeer) GetMessageName() string          { return "wg_remove_peer" }
func (*WgRemovePeer) GetCrcString() string            { return "b6404454" }
func (*WgRemovePeer) GetMessageType() api.MessageType { return api.RequestMessage }

// WgRemovePeerReply represents VPP binary API message 'wg_remove_peer_reply'.
type WgRemovePeerReply struct {
	Retval int32
}

func (m *WgRemovePeerReply) Reset()                        { *m = WgRemovePeerReply{} }
func (*WgRemovePeerReply) GetMessageName() string          { return "wg_remove_peer_reply" }
func (*WgRemovePeerReply) GetCrcString() string            { return "e8d4e804" }
func (*WgRemovePeerReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// WgSetDevice represents VPP binary API message 'wg_set_device'.
type WgSetDevice struct {
	PrivateKey []byte `struc:"[45]byte"`
	Port       uint16
}

func (m *WgSetDevice) Reset()                        { *m = WgSetDevice{} }
func (*WgSetDevice) GetMessageName() string          { return "wg_set_device" }
func (*WgSetDevice) GetCrcString() string            { return "c7a63448" }
func (*WgSetDevice) GetMessageType() api.MessageType { return api.RequestMessage }

// WgSetDeviceReply represents VPP binary API message 'wg_set_device_reply'.
type WgSetDeviceReply struct {
	Retval int32
}

func (m *WgSetDeviceReply) Reset()                        { *m = WgSetDeviceReply{} }
func (*WgSetDeviceReply) GetMessageName() string          { return "wg_set_device_reply" }
func (*WgSetDeviceReply) GetCrcString() string            { return "e8d4e804" }
func (*WgSetDeviceReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// WgSetPeer represents VPP binary API message 'wg_set_peer'.
type WgSetPeer struct {
	PublicKey           []byte `struc:"[45]byte"`
	Port                uint16
	Endpoint            IP4Address
	AllowedIP           IP4Address
	TunSwIfIndex        InterfaceIndex
	PersistentKeepalive uint16
}

func (m *WgSetPeer) Reset()                        { *m = WgSetPeer{} }
func (*WgSetPeer) GetMessageName() string          { return "wg_set_peer" }
func (*WgSetPeer) GetCrcString() string            { return "83b9c0ce" }
func (*WgSetPeer) GetMessageType() api.MessageType { return api.RequestMessage }

// WgSetPeerReply represents VPP binary API message 'wg_set_peer_reply'.
type WgSetPeerReply struct {
	Retval int32
}

func (m *WgSetPeerReply) Reset()                        { *m = WgSetPeerReply{} }
func (*WgSetPeerReply) GetMessageName() string          { return "wg_set_peer_reply" }
func (*WgSetPeerReply) GetCrcString() string            { return "e8d4e804" }
func (*WgSetPeerReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*WgDeviceDetails)(nil), "wg.WgDeviceDetails")
	api.RegisterMessage((*WgDeviceDump)(nil), "wg.WgDeviceDump")
	api.RegisterMessage((*WgGenkey)(nil), "wg.WgGenkey")
	api.RegisterMessage((*WgGenkeyReply)(nil), "wg.WgGenkeyReply")
	api.RegisterMessage((*WgPeersCount)(nil), "wg.WgPeersCount")
	api.RegisterMessage((*WgPeersCountReply)(nil), "wg.WgPeersCountReply")
	api.RegisterMessage((*WgPeersDetails)(nil), "wg.WgPeersDetails")
	api.RegisterMessage((*WgPeersDump)(nil), "wg.WgPeersDump")
	api.RegisterMessage((*WgPubkey)(nil), "wg.WgPubkey")
	api.RegisterMessage((*WgPubkeyReply)(nil), "wg.WgPubkeyReply")
	api.RegisterMessage((*WgRemoveDevice)(nil), "wg.WgRemoveDevice")
	api.RegisterMessage((*WgRemoveDeviceReply)(nil), "wg.WgRemoveDeviceReply")
	api.RegisterMessage((*WgRemovePeer)(nil), "wg.WgRemovePeer")
	api.RegisterMessage((*WgRemovePeerReply)(nil), "wg.WgRemovePeerReply")
	api.RegisterMessage((*WgSetDevice)(nil), "wg.WgSetDevice")
	api.RegisterMessage((*WgSetDeviceReply)(nil), "wg.WgSetDeviceReply")
	api.RegisterMessage((*WgSetPeer)(nil), "wg.WgSetPeer")
	api.RegisterMessage((*WgSetPeerReply)(nil), "wg.WgSetPeerReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*WgDeviceDetails)(nil),
		(*WgDeviceDump)(nil),
		(*WgGenkey)(nil),
		(*WgGenkeyReply)(nil),
		(*WgPeersCount)(nil),
		(*WgPeersCountReply)(nil),
		(*WgPeersDetails)(nil),
		(*WgPeersDump)(nil),
		(*WgPubkey)(nil),
		(*WgPubkeyReply)(nil),
		(*WgRemoveDevice)(nil),
		(*WgRemoveDeviceReply)(nil),
		(*WgRemovePeer)(nil),
		(*WgRemovePeerReply)(nil),
		(*WgSetDevice)(nil),
		(*WgSetDeviceReply)(nil),
		(*WgSetPeer)(nil),
		(*WgSetPeerReply)(nil),
	}
}

// RPCService represents RPC service API for wg module.
type RPCService interface {
	DumpWgDevice(ctx context.Context, in *WgDeviceDump) (RPCService_DumpWgDeviceClient, error)
	DumpWgPeers(ctx context.Context, in *WgPeersDump) (RPCService_DumpWgPeersClient, error)
	WgGenkey(ctx context.Context, in *WgGenkey) (*WgGenkeyReply, error)
	WgPeersCount(ctx context.Context, in *WgPeersCount) (*WgPeersCountReply, error)
	WgPubkey(ctx context.Context, in *WgPubkey) (*WgPubkeyReply, error)
	WgRemoveDevice(ctx context.Context, in *WgRemoveDevice) (*WgRemoveDeviceReply, error)
	WgRemovePeer(ctx context.Context, in *WgRemovePeer) (*WgRemovePeerReply, error)
	WgSetDevice(ctx context.Context, in *WgSetDevice) (*WgSetDeviceReply, error)
	WgSetPeer(ctx context.Context, in *WgSetPeer) (*WgSetPeerReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpWgDevice(ctx context.Context, in *WgDeviceDump) (RPCService_DumpWgDeviceClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpWgDeviceClient{stream}
	return x, nil
}

type RPCService_DumpWgDeviceClient interface {
	Recv() (*WgDeviceDetails, error)
}

type serviceClient_DumpWgDeviceClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpWgDeviceClient) Recv() (*WgDeviceDetails, error) {
	m := new(WgDeviceDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpWgPeers(ctx context.Context, in *WgPeersDump) (RPCService_DumpWgPeersClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpWgPeersClient{stream}
	return x, nil
}

type RPCService_DumpWgPeersClient interface {
	Recv() (*WgPeersDetails, error)
}

type serviceClient_DumpWgPeersClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpWgPeersClient) Recv() (*WgPeersDetails, error) {
	m := new(WgPeersDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) WgGenkey(ctx context.Context, in *WgGenkey) (*WgGenkeyReply, error) {
	out := new(WgGenkeyReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WgPeersCount(ctx context.Context, in *WgPeersCount) (*WgPeersCountReply, error) {
	out := new(WgPeersCountReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WgPubkey(ctx context.Context, in *WgPubkey) (*WgPubkeyReply, error) {
	out := new(WgPubkeyReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WgRemoveDevice(ctx context.Context, in *WgRemoveDevice) (*WgRemoveDeviceReply, error) {
	out := new(WgRemoveDeviceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WgRemovePeer(ctx context.Context, in *WgRemovePeer) (*WgRemovePeerReply, error) {
	out := new(WgRemovePeerReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WgSetDevice(ctx context.Context, in *WgSetDevice) (*WgSetDeviceReply, error) {
	out := new(WgSetDeviceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WgSetPeer(ctx context.Context, in *WgSetPeer) (*WgSetPeerReply, error) {
	out := new(WgSetPeerReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
